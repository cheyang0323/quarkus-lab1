# configure your datasource
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgres-database/person
%prod.quarkus.datasource.jdbc.driver=org.postgresql.Driver

# Configure the Kafka sink (we write to it)
%prod.mp.messaging.outgoing.generated-name.bootstrap.servers=names-cluster-kafka-bootstrap:9092
%prod.mp.messaging.outgoing.generated-name.connector=smallrye-kafka
%prod.mp.messaging.outgoing.generated-name.topic=names
%prod.mp.messaging.outgoing.generated-name.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
%prod.mp.messaging.incoming.names.bootstrap.servers=names-cluster-kafka-bootstrap:9092
%prod.mp.messaging.incoming.names.connector=smallrye-kafka
%prod.mp.messaging.incoming.names.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# OpenShift extension
%prod.quarkus.kubernetes-client.trust-certs=true
%prod.quarkus.kubernetes.deploy=true
%prod.quarkus.kubernetes.deployment-target=openshift
%prod.quarkus.openshift.build-strategy=docker
%prod.quarkus.openshift.expose=true
# quarkus.openshift.build-strategy=s2i
# Native
# %prod.quarkus.native.container-build=true
# %prod.quarkus.native.container-runtime=docker
# %prod.quarkus.native.container-runtime=podman

# Open Tracing
%prod.quarkus.jaeger.service-name=people
%prod.quarkus.jaeger.sampler-type=const
%prod.quarkus.jaeger.sampler-param=1
%prod.quarkus.jaeger.endpoint=http://jaeger-collector:14268/api/traces
org.acme.people.service.StarWarsService/mp-rest/url=https://swapi.dev

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%dev.quarkus.datasource.jdbc.driver=org.h2.Driver
%dev.quarkus.datasource.username=sa
%dev.quarkus.datasource.password=sa
quarkus.hibernate-orm.sql-load-script=import.sql

# Configure the Kafka sink (we write to it)
%dev.mp.messaging.outgoing.generated-name.bootstrap.servers=kafka-server:9092
%dev.mp.messaging.outgoing.generated-name.connector=smallrye-kafka
%dev.mp.messaging.outgoing.generated-name.topic=names
%dev.mp.messaging.outgoing.generated-name.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Configure the Kafka source (we read from it)
%dev.mp.messaging.incoming.names.bootstrap.servers=kafka-server:9092
%dev.mp.messaging.incoming.names.connector=smallrye-kafka
%dev.mp.messaging.incoming.names.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%test.quarkus.datasource.jdbc.driver=org.h2.Driver
%test.quarkus.datasource.username=sa
%test.quarkus.datasource.password=sa

quarkus.datasource.username=sa
quarkus.datasource.password=sa
database.up=true

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create
# quarkus.native.container-build=true
# quarkus.native.container-runtime=podman

# quarkus.openshift.route.expose=true
# quarkus.openshift.jvm-dockerfile=src/main/resources/Dockerfile.custom-jvm
greeting.message=hello
greeting.name=quarkus in dev mode
%prod.greeting.name=production quarkus
